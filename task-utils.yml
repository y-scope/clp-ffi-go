version: "3"

tasks:
  cmake-build:
    label: "cmake-build: {{.SOURCE_DIR}} {{.BUILD_DIR}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .BUILD_DIR) .CHECKSUM_FILE}}'
      CMAKE_ARGS: "{{default nil .CMAKE_ARGS}}"
    requires:
      vars: ["BUILD_DIR", "SOURCE_DIR"]
    sources:
      - "{{.SOURCE_DIR}}/**/*"
      - exclude: "{{.SOURCE_DIR}}/.cache/**/*"
      - exclude: "{{.SOURCE_DIR}}/compile_commands.json"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_PATHS: ["{{.BUILD_DIR}}"]
          EXCLUDE_PATHS: ["install_manifest.txt"]
    cmds:
      - >-
        cmake
        -S "{{.SOURCE_DIR}}"
        -B "{{.BUILD_DIR}}"
        {{.CMAKE_ARGS}}
      - >-
        cmake
        --build "{{.BUILD_DIR}}"
        --parallel
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_PATHS: ["{{.BUILD_DIR}}"]
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
          EXCLUDE_PATHS: ["install_manifest.txt"]

  cmake-install:
    label: "cmake-install: {{.BUILD_DIR}} {{.INSTALL_PREFIX}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .INSTALL_PREFIX) .CHECKSUM_FILE}}'
      _INSTALL_PREFIX_ARRAY: ["{{.INSTALL_PREFIX}}"]
      DATA_PATHS:
        ref: "default ._INSTALL_PREFIX_ARRAY .DATA_PATHS"
    requires:
      vars: ["BUILD_DIR", "INSTALL_PREFIX"]
    sources:
      - "{{.BUILD_DIR}}/**/*"
      - exclude: "{{.BUILD_DIR}}/install_manifest.txt"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_PATHS:
            ref: ".DATA_PATHS"
    cmds:
      - >-
        cmake
        --install "{{.BUILD_DIR}}"
        --prefix "{{.INSTALL_PREFIX}}"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_PATHS:
            ref: ".DATA_PATHS"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"

  curl:
    label: "curl: {{.OUTPUT_FILE}}"
    internal: true
    vars:
      OUTPUT_FILE: "{{default (base .URL) .OUTPUT_FILE}}"
    requires:
      vars: ["URL", "URL_SHA256"]
    generates:
      - "{{.OUTPUT_FILE}}"
    status:
      - >-
        diff
        <(echo "{{.URL_SHA256}}")
        <(openssl dgst -sha256 "{{.OUTPUT_FILE}}"
        | awk '{print $2}')
    cmds:
      - |-
        mkdir -p "{{dir .OUTPUT_FILE}}"
        curl -L "{{.URL}}" -o "{{.OUTPUT_FILE}}"

  # @param {string} OUTPUT_DIR
  # @param {string} URL
  # @param {string} URL_SHA256
  fetch_src:
    label: "fetch_src: {{.OUTPUT_DIR}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .OUTPUT_DIR) .CHECKSUM_FILE}}'
      STRIP: "{{default 1 .STRIP}}"
      TAR_FILE: '{{default (printf "%s.tar.gz" .OUTPUT_DIR) .TAR_FILE}}'
    requires:
      vars: ["OUTPUT_DIR", "URL", "URL_SHA256"]
    sources: ["{{.TASKFILE}}"]
    generates: ["{{.CHECKSUM_FILE}}", "{{.TAR_FILE}}"]
    deps:
      - task: "curl"
        vars:
          URL: "{{.URL}}"
          URL_SHA256: "{{.URL_SHA256}}"
          OUTPUT_FILE: "{{.TAR_FILE}}"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_PATHS: ["{{.OUTPUT_DIR}}"]
    cmds:
      - |-
        rm -rf "{{.OUTPUT_DIR}}"
        mkdir -p "{{.OUTPUT_DIR}}"
        tar -x --strip-components="{{.STRIP}}" -C "{{.OUTPUT_DIR}}" -f "{{.TAR_FILE}}"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_PATHS: ["{{.OUTPUT_DIR}}"]
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"

  # @param {[]string} [DATA_PATHS] A list of paths to compute the checksum for.
  # @param {string} OUTPUT_FILE
  # @param {[]string} [EXCLUDE_PATHS] A list of paths, relative to any `DATA_PATHS`, to exclude from
  # the checksum.
  compute-checksum:
    desc: "Tries to compute a checksum for the given directory and output it to a file."
    internal: true
    silent: true
    requires:
      vars: ["DATA_PATHS", "OUTPUT_FILE"]
    cmds:
      - >-
        tar cf -
        --group 0
        --mtime "UTC 1970-01-01"
        --numeric-owner
        --owner 0
        --sort name
        {{- range .EXCLUDE_PATHS}}
        --exclude="{{.}}"
        {{- end}}
        {{- range .DATA_PATHS}}
        "{{.}}"
        {{- end}}
        2> /dev/null
        | md5sum > {{.OUTPUT_FILE}}
    # Ignore errors so that dependent tasks don't fail
    ignore_error: true

  # @param {[]string} [DATA_PATHS] A list of paths to validate the checksum for.
  # @param {string} OUTPUT_FILE
  # @param {[]string} [EXCLUDE_PATHS] A list of paths, relative to any `DATA_PATHS`, to exclude from
  # the checksum.
  validate-checksum:
    desc: "Validates the checksum of the given directory matches the checksum in the given file, or
    deletes the checksum file otherwise."
    internal: true
    silent: true
    vars:
      TMP_CHECKSUM_FILE: "{{.CHECKSUM_FILE}}.tmp"
    requires:
      vars: ["CHECKSUM_FILE", "DATA_PATHS"]
    cmds:
      - task: "compute-checksum"
        vars:
          DATA_PATHS:
            ref: ".DATA_PATHS"
          EXCLUDE_PATHS:
            ref: ".EXCLUDE_PATHS"
          OUTPUT_FILE: "{{.TMP_CHECKSUM_FILE}}"
      - defer: "rm -f '{{.TMP_CHECKSUM_FILE}}'"
      # Check that the directory exists and the checksum matches; otherwise delete the checksum file
      - >-
        (
        {{- range .DATA_PATHS}}
        test -e "{{.}}" &&
        {{- end}}
        diff -q '{{.TMP_CHECKSUM_FILE}}' '{{.CHECKSUM_FILE}}' 2> /dev/null
        ) || rm -f '{{.CHECKSUM_FILE}}'

