version: "3"

includes:
  # lint: "lint-tasks.yml"
  utils: "tools/yscope-dev-utils/taskfiles/utils.yml"

vars:
  G_BUILD_DIR: "{{.TASKFILE_DIR}}/build"
  G_DEPS_DIR: "{{.G_BUILD_DIR}}/deps"
  G_LINT_VENV_DIR: "{{.G_BUILD_DIR}}/lint-venv"
  G_INSTALL_PREFIX: "{{.TASKFILE_DIR}}"

tasks:
  bazel:
    cmds:
      - "bazel build //..."

  build:
    cmds:
      - task: "build-cpp"
      - task: "build-go"

  build-cpp:
    vars:
      BUILD_TYPE: '{{default "Release" .BUILD_TYPE}}'
      BUILD_DIR: "{{.G_BUILD_DIR}}/{{.BUILD_TYPE}}"
    deps:
      - "install-deps-cpp-clp"
      - "install-deps-cpp-outcome"
      - "install-deps-cpp-msgpack"
    cmds:
      - task: "cmake_build"
        vars:
          SOURCE_DIR: "{{.TASKFILE_DIR}}/cpp"
          BUILD_DIR: "{{.BUILD_DIR}}"
          CMAKE_ARGS: >-
            -DCMAKE_BUILD_TYPE="{{.BUILD_TYPE}}"
            -DOS_SUFFIX="{{OS}}"
            -DARCH_SUFFIX="{{ARCH}}"
            -DDEPS_DIR="{{.G_DEPS_DIR}}"
            -Dmsgpack-cxx_ROOT="{{.G_DEPS_DIR}}/msgpack-install"
            -Doutcome_SOURCE_DIR="{{.G_DEPS_DIR}}/outcome-src"
      - task: "cmake_install"
        vars:
          BUILD_DIR: "{{.BUILD_DIR}}"
          INSTALL_PREFIX: "{{.G_INSTALL_PREFIX}}"

  build-go:
    deps:
      - "build-go-generate"
    sources:
      - "{{.TASKFILE_DIR}}/go.mod"
      - "{{.TASKFILE_DIR}}/ffi/**/*"
      - "{{.TASKFILE_DIR}}/ir/**/*"
    cmds:
      - |-
        go build {{.TASKFILE_DIR}}/...

  build-go-generate:
    sources:
      - "{{.TASKFILE_DIR}}/go.mod"
      - "{{.TASKFILE_DIR}}/ffi/**/*"
      - "{{.TASKFILE_DIR}}/ir/**/*"
      - exclude: "{{.TASKFILE_DIR}}/ir/irerror_string.go"
    generates: ["{{.TASKFILE_DIR}}/ir/irerror_string.go"]
    cmds:
      - |-
        go install "golang.org/x/tools/cmd/stringer@latest"
        go generate "{{.TASKFILE_DIR}}/..."

  clean:
    vars:
      BUILD_TYPE: '{{default "Release" .BUILD_TYPE}}'
    cmds:
      - |-
        rm -f '{{.G_INSTALL_PREFIX}}/lib/{{printf "libclp_ffi_%s_%s.a" OS ARCH}}'
        rm -fr "{{.G_INSTALL_PREFIX}}/include/*"
        rm -fr "{{.G_BUILD_DIR}}/{{.BUILD_TYPE}}"
        rm -f "{{.G_BUILD_DIR}}/{{.BUILD_TYPE}}.md5"
        go clean -cache

  clean-all:
    deps:
      - "clean-deps"
      - "clean"
    cmds:
      - |-
        rm -fr "{{.G_BUILD_DIR}}"

  clean-deps:
    cmds:
      - rm -fr "{{.G_DEPS_DIR}}"

  install-deps-cpp-clp:
    vars:
      SOURCE_DIR: '{{default (printf "%s/clp-src/clp" .G_DEPS_DIR) .SOURCE_DIR}}'
    deps:
      - "install-deps-cpp-clp-json"
    cmds:
      - task: "fetch_src"
        vars:
          OUTPUT_DIR: "{{.SOURCE_DIR}}"
          URL: "https://github.com/y-scope/clp/archive/e21672b906641c4724a25ea74f13857afdebe0e8.tar.gz"
          URL_SHA256: "b7ab19af62fb0601d858047452e2f330489070caccd4aaf1e09709f6ca6324ab"

  install-deps-cpp-clp-json:
    cmds:
      - task: "curl"
        vars:
          OUTPUT_FILE: "{{.G_DEPS_DIR}}/json-src/json/single_include/nlohmann/json.hpp"
          URL: "https://github.com/nlohmann/json/releases/download/v3.11.3/json.hpp"
          URL_SHA256: "9bea4c8066ef4a1c206b2be5a36302f8926f7fdc6087af5d20b417d0cf103ea6"

  install-deps-cpp-msgpack:
    vars:
      BUILD_DIR: '{{default (printf "%s/msgpack-build" .G_DEPS_DIR) .BUILD_DIR}}'
      SOURCE_DIR: '{{default (printf "%s/msgpack-src" .G_DEPS_DIR) .SOURCE_DIR}}'
      INSTALL_PREFIX: '{{default (printf "%s/msgpack-install" .G_DEPS_DIR) .INSTALL_PREFIX}}'
    cmds:
      - task: "fetch_src"
        vars:
          OUTPUT_DIR: "{{.SOURCE_DIR}}"
          URL: "https://github.com/msgpack/msgpack-c/archive/cpp-6.1.0.tar.gz"
          URL_SHA256: "5e63e4d9b12ab528fccf197f7e6908031039b1fc89cd8da0e97fbcbf5a6c6d3a"
      - task: "cmake_build"
        vars:
          BUILD_DIR: "{{.BUILD_DIR}}"
          SOURCE_DIR: "{{.SOURCE_DIR}}"
          CMAKE_ARGS: >-
            -DMSGPACK_CXX20="ON"
            -DMSGPACK_USE_BOOST="OFF"
      - task: "cmake_install"
        vars:
          BUILD_DIR: "{{.BUILD_DIR}}"
          INSTALL_PREFIX: "{{.INSTALL_PREFIX}}"

  install-deps-cpp-outcome:
    vars:
      SOURCE_DIR: '{{default (printf "%s/outcome-src/outcome/single-header" .G_DEPS_DIR) .SOURCE_DIR}}'
    cmds:
      - task: "curl"
        vars:
          OUTPUT_FILE: "{{.SOURCE_DIR}}/outcome.hpp"
          URL: "https://github.com/ned14/outcome/raw/v2.2.10/single-header/outcome.hpp"
          URL_SHA256: "ad624622dcb1613027d39bd1aac93a13f11f46df197aa494a3980bef3c044dad"

  # lint:
  #   deps:
  #     - "lint-cpp"
  #     - "lint-go"
  #     - "lint-yml"

  # lint-cpp:
  #   deps: ["lint-venv-cpp"]
  #   # cmds:
  #   #   - clang-tidy

  # lint-go:
  #   # deps: ["venv"]
  #   cmds:
  #     # curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
  #     # sh -s -- -b $(go env GOPATH)/bin v1.59.0
  #     - |-
  #       golangci-lint run

  # lint-yml:
  #   # deps: ["venv"]
  #   cmds:
  #     - |-
  #       # . "{{.G_LINT_VENV_DIR}}/bin/activate"
  #       yamllint --strict \
  #         .github \
  #         .golangci.yml \
  #         .yamllint.yml \
  #         cpp/.clang-format \
  #         cpp/.clang-tidy \
  #         taskfile.yml

  test:
    deps:
      - "test-bazel"
      - "test-go"

  test-go:
    deps: [build-go]

  test-bazel:
    cmds:
      - bazel test //ir:ir_test


## MOVE TO UTILS


  cmake_build:
    label: "cmake_build: {{.SOURCE_DIR}} {{.BUILD_DIR}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .BUILD_DIR) .CHECKSUM_FILE}}'
      CMAKE_ARGS: "{{default nil .CMAKE_ARGS}}"
    requires:
      vars: ["BUILD_DIR", "SOURCE_DIR"]
    sources: ["{{.SOURCE_DIR}}/**/*"]
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "utils:validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.BUILD_DIR}}"
          EXCLUDE_PATHS: ["install_manifest.txt"]
    cmds:
      # useful to check if validate failed
      # - stat "{{.CHECKSUM_FILE}}" || true
      - >-
        cmake
        -S "{{.SOURCE_DIR}}"
        -B "{{.BUILD_DIR}}"
        {{.CMAKE_ARGS}}
      - >-
        cmake
        --build "{{.BUILD_DIR}}"
        --parallel
      # This command must be last
      - task: "utils:compute-checksum"
        vars:
          DATA_DIR: "{{.BUILD_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
          EXCLUDE_PATHS: ["install_manifest.txt"]

  cmake_install:
    label: "cmake_install: {{.BUILD_DIR}} {{.INSTALL_PREFIX}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .INSTALL_PREFIX) .CHECKSUM_FILE}}'
    requires:
      vars: ["BUILD_DIR", "INSTALL_PREFIX"]
    sources:
      - "{{.BUILD_DIR}}/**/*"
      - exclude: "{{.BUILD_DIR}}/install_manifest.txt"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "utils:validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.INSTALL_PREFIX}}"
    cmds:
      - >-
        cmake
        --install "{{.BUILD_DIR}}"
        --prefix "{{.INSTALL_PREFIX}}"
      # This command must be last
      - task: "utils:compute-checksum"
        vars:
          DATA_DIR: "{{.INSTALL_PREFIX}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"

  curl:
    label: "curl: {{.OUTPUT_FILE}}"
    internal: true
    vars:
      OUTPUT_FILE: "{{default (base .URL) .OUTPUT_FILE}}"
    requires:
      vars: ["URL", "URL_SHA256"]
    generates:
      - "{{.OUTPUT_FILE}}"
    status:
      - >-
        diff
        <(echo "{{.URL_SHA256}}")
        <(openssl dgst -sha256 "{{.OUTPUT_FILE}}"
        | awk '{print $2}')
    cmds:
      - |-
        mkdir -p "{{dir .OUTPUT_FILE}}"
        curl -L "{{.URL}}" -o "{{.OUTPUT_FILE}}"

  # @param {string} OUTPUT_DIR
  # @param {string} URL
  # @param {string} URL_SHA256
  fetch_src:
    label: "fetch_src: {{.OUTPUT_DIR}}"
    internal: true
    vars:
      CHECKSUM_FILE: '{{default (printf "%s.md5" .OUTPUT_DIR) .CHECKSUM_FILE}}'
      STRIP: "{{default 1 .STRIP}}"
      TAR_FILE: '{{default (printf "%s.tar.gz" .OUTPUT_DIR) .TAR_FILE}}'
    requires:
      vars: ["OUTPUT_DIR", "URL", "URL_SHA256"]
    sources: ["{{.TASKFILE}}"]
    generates: ["{{.CHECKSUM_FILE}}", "{{.TAR_FILE}}"]
    deps:
      - task: "curl"
        vars:
          URL: "{{.URL}}"
          URL_SHA256: "{{.URL_SHA256}}"
          OUTPUT_FILE: "{{.TAR_FILE}}"
      - task: "utils:validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - |-
        rm -rf "{{.OUTPUT_DIR}}"
        mkdir -p "{{.OUTPUT_DIR}}"
        tar -x --strip-components="{{.STRIP}}" -C "{{.OUTPUT_DIR}}" -f "{{.TAR_FILE}}"
      # This command must be last
      - task: "utils:compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
